import { CanvasConverseClassContract, CanvasConverseObject, CanvasConverseGeneralOptions, OutlineGroups } from "./types";
import { NaivePhysics } from "./naivePhysics.js";
export declare class CanvasConverse implements CanvasConverseClassContract {
    #private;
    objects: CanvasConverseObject;
    canvas: HTMLCanvasElement;
    context: CanvasRenderingContext2D;
    options: CanvasConverseGeneralOptions;
    h: number;
    w: number;
    physicsEngine: NaivePhysics;
    constructor();
    init(canvas: HTMLCanvasElement, options?: CanvasConverseGeneralOptions): void;
    rectangle({ x, y, w, h, rotation, rotationX, rotationY, cornerRadii, fill, stroke, lineWidth, filter, physics, outlineGroup, addObject, }: {
        x: any;
        y: any;
        w: any;
        h: any;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        cornerRadii: any;
        fill: any;
        stroke: any;
        lineWidth: any;
        filter: any;
        physics: any;
        outlineGroup?: string;
        addObject?: boolean;
    }): any;
    triangle({ x1, y1, x2, y2, x3, y3, rotation, rotationX, rotationY, fill, filter, physics, outlineGroup, addObject, }: {
        x1: any;
        y1: any;
        x2: any;
        y2: any;
        x3: any;
        y3: any;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        fill: any;
        filter: any;
        physics: any;
        outlineGroup?: string;
        addObject?: boolean;
    }): any;
    ellipse({ x, y, r, rx, ry, fill, stroke, lineWidth, filter, centerRotation, centerStartAngle, centerEndAngle, rotation, rotationX, rotationY, counterclockwise, physics, outlineGroup, addObject, }: {
        x: any;
        y: any;
        r: any;
        rx: any;
        ry: any;
        fill: any;
        stroke: any;
        lineWidth: any;
        filter: any;
        centerRotation?: number;
        centerStartAngle?: number;
        centerEndAngle?: number;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        counterclockwise?: boolean;
        physics: any;
        outlineGroup?: string;
        addObject?: boolean;
    }): any;
    line({ x1, y1, x2, y2, lineWidth, stroke, filter, rotation, rotationX, rotationY, lineCap, physics, outlineGroup, addObject, }: {
        x1: any;
        y1: any;
        x2: any;
        y2: any;
        lineWidth: any;
        stroke: any;
        filter: any;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        lineCap: any;
        physics: any;
        outlineGroup?: string;
        addObject?: boolean;
    }): any;
    draw({ x, y, rotation, rotationX, rotationY, fill, filter, physics, outlineGroup, addObject, }: {
        x: any;
        y: any;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        fill: any;
        filter: any;
        physics: any;
        outlineGroup?: string;
        addObject?: boolean;
    }, callbackWithContext: any): any;
    group(objectToAttachTo: any, arrayOfObjectsToAttach?: CanvasConverseObject[]): void;
    usingOutlineGroup: boolean;
    outlineGroups: OutlineGroups;
    makeOutlineGroup({ drawShapesCallback, stroke, fill, lineWidth, filter, outlineGroupKey, addObject, }: {
        drawShapesCallback: any;
        stroke: any;
        fill: any;
        lineWidth: any;
        filter: any;
        outlineGroupKey: any;
        addObject?: boolean;
    }): void;
    text({ text, x, y, font, type, style, baseline, rotation, rotationX, rotationY, addObject, }: {
        text: any;
        x?: number;
        y?: number;
        font: any;
        type: any;
        style: any;
        baseline?: string;
        rotation?: number;
        rotationX: any;
        rotationY: any;
        addObject?: boolean;
    }): any;
    clear(): void;
}
